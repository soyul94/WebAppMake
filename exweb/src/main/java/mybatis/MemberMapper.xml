<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
  
  <!-- namespace는 현재 파일에 정의된 SQL문 집합의 고유한 이름 
  	   보통은 SQL문을 실행할 Dao인터페이스 이름으로 설정-->
  <!-- 문성진 교수님의 *_SQL.xml파일 역할 -->
<mapper namespace="com.exam.member.MemberDao">
<!-- SQL문의 종류와 동일한 이름의 태그를 사용하여 SQL문을 등록
	 id는 현재 파일 내에서 SQL문의 고유한 이름으로 보통은 SQL문을 실행할 Dao인터페이스의 메서드 이름으로 설정 -->
	
	<resultMap type="com.exam.member.MemberVO" id="memberVo">
		<id	property="memId" column="MEM_ID" />		<!-- PK컬럼은 id로 선언한다. -->
		<result property="memPW" column="MEM_PW" />
		<result property="memName" column="MEM_NAME" />
		<result property="memPoint" column="MEM_POINT" />
	</resultMap>
	
	<select id="selectMember" resultType="MemberVO" parameterType="string" >
		select MEM_ID, MEM_NAME, MEM_POINT from member_table where MEM_ID=#{memId}
	</select>
	
	<select id="selectMemberList" resultType="MemberVO">
    	select MEM_ID, MEM_NAME, MEM_POINT from member_table
	</select>	 
<!--<select id="selectMemberList" resultMap="memberVo">
    	select MEM_ID , MEM_PW, MEM_NAME, MEM_POINT from member_table
	</select> -->
<!--<select id="selectMemberList" resultType="com.exam.member.MemberVO">
    	select MEM_ID as memId, MEM_PW as memPw, MEM_NAME as memName, MEM_POINT as memPoint from member_table
	</select> -->
	
	<select id="selectLoginMember" resultType="MemberVO" parameterType="com.exam.member.MemberVO">
		select MEM_ID, MEM_NAME, MEM_POINT from member_table where MEM_ID=#{memId} and MEM_PW=#{memPW}
	</select>
	<!-- parameterType을 명시하지 않아도 에러는 발생하지 않으나 권장사항이다. -->
	
	<insert id="insertMember" parameterType="com.exam.member.MemberVO" >
		INSERT INTO MEMBER_TABLE(MEM_ID, MEM_PW, MEM_NAME, MEM_POINT) VALUES(#{memId}, #{memPW}, #{memName}, #{memPoint})
	</insert>
	<!-- prameterType은 쿼리문을 수행하기 위해 받을 인자의 형태를 지정하는 속성 -->
	<!-- #{}대신 ${}을 써도 쿼리문은 수행되나 보안상으로 좋지 않기 때문에 쓰지 않는다. 
		 ${}는 그냥 값이 들어가는게 아니라 문자열을 +연산하는 형태로 들어가서 쿼리문을 비정상으로 종료시키는 값에 대응할 수 없음 -->
	
	<update id="updateMember" parameterType="com.exam.member.MemberVO">
		update MEMBER_TABLE set MEM_NAME=#{memName}, MEM_POINT=#{memPoint} where MEM_ID=#{memId}
	</update>
		 
	<delete id="deleteMember" parameterType="string">
		delete from member_table where MEM_ID = #{memId}
	</delete> <!-- 원래는 java.lang.String을 써야하지만 이미 마이바티스 내부에 alias가 되어있다. -->
			  <!-- 단일값을 갖는 파라미터를 받은 경우에는 속성(변수)이름이 무의미하다. 즉, 아무값이나 사용가능. -->
</mapper>	  


<!-- 쿼리문 결과와 자바객체를 매핑하는 법(쿼리문 결과를 제대로 출력하는 방법) -->
<!-- 1. 쿼리문의 결과로 나올 뷰의 컬럼명과 resultType의 변수명을 동일하게 만든다 (Alias -> as 생략 가능.)
		마이바티스는 기본적으로 resultType객체의 필드와 동일한 컬럼명을 가진 컬럼의 값을 저장함
		select MEM_ID as memId, MEM_PW as memPw, MEM_NAME as memName, MEM_POINT as memPoint from member_table
		select MEM_ID memId, MEM_PW memPw, MEM_NAME memName, MEM_POINT memPoint from member_table
		두 문장 모두 동일함. -->
<!-- 2. resultMap 사용하기 <resultMap type="결과 저장할 객체 타입 주소" id="생성객체 이름">
							<result property="객체의 필드명" column="DB의 컬럼명" />
						</resultMap>	
						매번 쿼리문 마다 alias하려면 귀찮으니 이용편리하게 미리 매칭을 해주는 것. 
						<select id="selectMemberList" resultMap="memberVo">
    						select MEM_ID , MEM_PW, MEM_NAME, MEM_POINT from member_table
						</select> -->
<!-- 3. config.xml에 setting태그 이용 
		<settings>
			<setting name="mapUnderscoreToCamelCase" value="true"/> 
		</settings>
			밑줄표기법의 컬럼명을 낙타표기법의 변수명과 자동맵핑
		<select id="selectMemberList" resultType="com.exam.member.MemberVO">
    		select MEM_ID , MEM_PW, MEM_NAME, MEM_POINT from member_table
		</select> -->
